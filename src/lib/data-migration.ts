import { Product } from './products-data';
import { PRODUCT_CATEGORIES, getCategoryByKey } from './ data/categories';

export interface MigrationResult {
  migratedProducts: Product[];
  issues: MigrationIssue[];
  hasChanges: boolean;
}

export interface MigrationIssue {
  type: 'invalid_id' | 'invalid_category' | 'missing_field' | 'extra_field' | 'invalid_value';
  productName?: string;
  originalId?: string;
  newId?: string;
  field?: string;
  originalValue?: any;
  newValue?: any;
  message: string;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º UUID v4
function isValidUUID(str: string): boolean {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(str);
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π UUID v4
function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
function isValidCategory(categoryKey: string): boolean {
  return getCategoryByKey(categoryKey) !== undefined;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º >= 0
function isValidNumber(value: any): boolean {
  return typeof value === 'number' && !isNaN(value) && value >= 0;
}

// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
function migrateProduct(product: any): { product: Product; issues: MigrationIssue[] } {
  const issues: MigrationIssue[] = [];
  let migratedProduct: any = { ...product };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º ID
  if (!product.id || typeof product.id !== 'string' || !isValidUUID(product.id)) {
    const newId = generateUUID();
    issues.push({
      type: 'invalid_id',
      productName: product.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
      originalId: product.id,
      newId,
      message: `–ó–∞–º–µ–Ω–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID "${product.id}" –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π UUID "${newId}"`
    });
    migratedProduct.id = newId;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  const requiredFields: (keyof Product)[] = ['name', 'category', 'calories', 'protein', 'fat', 'carbs'];
  
  for (const field of requiredFields) {
    if (!(field in migratedProduct)) {
      let defaultValue: any;
      switch (field) {
        case 'name':
          defaultValue = '–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç';
          break;
        case 'category':
          defaultValue = PRODUCT_CATEGORIES.UNCATEGORIZED.key;
          break;
        case 'calories':
        case 'protein':
        case 'fat':
        case 'carbs':
          defaultValue = 0;
          break;
      }
      
      migratedProduct[field] = defaultValue;
      issues.push({
        type: 'missing_field',
        productName: migratedProduct.name,
        field,
        newValue: defaultValue,
        message: `–î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ "${field}" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "${defaultValue}"`
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø name
  if (typeof migratedProduct.name !== 'string') {
    const newName = String(migratedProduct.name || '–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç');
    issues.push({
      type: 'invalid_value',
      productName: migratedProduct.name,
      field: 'name',
      originalValue: migratedProduct.name,
      newValue: newName,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è "name": "${migratedProduct.name}" ‚Üí "${newName}"`
    });
    migratedProduct.name = newName;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  if (!isValidCategory(migratedProduct.category)) {
    const originalCategory = migratedProduct.category;
    migratedProduct.category = PRODUCT_CATEGORIES.UNCATEGORIZED.key;
    issues.push({
      type: 'invalid_category',
      productName: migratedProduct.name,
      field: 'category',
      originalValue: originalCategory,
      newValue: PRODUCT_CATEGORIES.UNCATEGORIZED.key,
      message: `–ó–∞–º–µ–Ω–µ–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${originalCategory}" –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "${PRODUCT_CATEGORIES.UNCATEGORIZED.name}"`
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
  const numericFields: (keyof Product)[] = ['calories', 'protein', 'fat', 'carbs'];
  
  for (const field of numericFields) {
    if (!isValidNumber(migratedProduct[field])) {
      const originalValue = migratedProduct[field];
      migratedProduct[field] = 0;
      issues.push({
        type: 'invalid_value',
        productName: migratedProduct.name,
        field,
        originalValue,
        newValue: 0,
        message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è "${field}": "${originalValue}" ‚Üí 0`
      });
    }
  }

  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
  const allowedFields = new Set(['id', 'name', 'category', 'calories', 'protein', 'fat', 'carbs']);
  for (const field in migratedProduct) {
    if (!allowedFields.has(field)) {
      delete migratedProduct[field];
      issues.push({
        type: 'extra_field',
        productName: migratedProduct.name,
        field,
        originalValue: product[field],
        message: `–£–¥–∞–ª–µ–Ω–æ –ª–∏—à–Ω–µ–µ –ø–æ–ª–µ "${field}" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "${product[field]}"`
      });
    }
  }

  return {
    product: migratedProduct as Product,
    issues
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function migrateUserProducts(rawData: any[]): MigrationResult {
  if (!Array.isArray(rawData)) {
    return {
      migratedProducts: [],
      issues: [{
        type: 'invalid_value',
        message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'
      }],
      hasChanges: true
    };
  }

  const migratedProducts: Product[] = [];
  const allIssues: MigrationIssue[] = [];
  let hasChanges = false;

  for (const rawProduct of rawData) {
    if (!rawProduct || typeof rawProduct !== 'object') {
      allIssues.push({
        type: 'invalid_value',
        message: `–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${JSON.stringify(rawProduct)}`
      });
      hasChanges = true;
      continue;
    }

    const { product, issues } = migrateProduct(rawProduct);
    migratedProducts.push(product);
    allIssues.push(...issues);
    
    if (issues.length > 0) {
      hasChanges = true;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID
  const seenIds = new Set<string>();
  for (let i = 0; i < migratedProducts.length; i++) {
    const product = migratedProducts[i];
    if (seenIds.has(product.id)) {
      const newId = generateUUID();
      allIssues.push({
        type: 'invalid_id',
        productName: product.name,
        originalId: product.id,
        newId,
        message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID "${product.id}", –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ "${newId}"`
      });
      migratedProducts[i] = { ...product, id: newId };
      hasChanges = true;
    } else {
      seenIds.add(product.id);
    }
  }

  return {
    migratedProducts,
    issues: allIssues,
    hasChanges
  };
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏
export function formatMigrationReport(issues: MigrationIssue[]): string {
  if (issues.length === 0) {
    return '–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.';
  }

  const report: string[] = [];
  report.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${issues.length} –ø—Ä–æ–±–ª–µ–º:`);
  
  const groupedIssues = issues.reduce((acc, issue) => {
    const key = issue.type;
    if (!acc[key]) acc[key] = [];
    acc[key].push(issue);
    return acc;
  }, {} as Record<string, MigrationIssue[]>);

  const typeNames: Record<string, string> = {
    invalid_id: 'üîë –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID',
    invalid_category: 'üìÇ –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    missing_field: '‚ûï –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è',
    extra_field: '‚ûñ –õ–∏—à–Ω–∏–µ –ø–æ–ª—è',
    invalid_value: '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'
  };

  for (const [type, typeIssues] of Object.entries(groupedIssues)) {
    report.push(`\n${typeNames[type] || type}:`);
    typeIssues.forEach((issue, index) => {
      report.push(`  ${index + 1}. ${issue.message}`);
    });
  }

  return report.join('\n');
}
